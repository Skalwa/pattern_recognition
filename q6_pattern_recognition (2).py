# -*- coding: utf-8 -*-
"""Q6 pattern recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VwjIqjdhFqP1H4UNXoyi3ozb1gnuR5Hc
"""

import cv2
import numpy as np
from matplotlib import pyplot as plt

# Step 1: Noise Reduction by Blurring
def noise_reduction(image):
    blurred_image = cv2.GaussianBlur(image, (5, 5), 0)
    return blurred_image

# Step 2: Histogram Analysis
def plot_histogram(image):
    plt.hist(image.ravel(), 256, [0, 256])
    plt.show()

# Step 3: Thresholding
def apply_thresholding(image):
    ret, thresholded_image = cv2.threshold(image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    return thresholded_image

# Step 4: Connectivity Analysis
def connected_component_label(image):
    num_labels, labels = cv2.connectedComponents(image)
    label_hue = np.uint8(179 * labels / np.max(labels))
    blank_ch = 255 * np.ones_like(label_hue)
    labeled_img = cv2.merge([label_hue, blank_ch, blank_ch])
    labeled_img = cv2.cvtColor(labeled_img, cv2.COLOR_HSV2BGR)
    labeled_img[label_hue == 0] = 0
    plt.imshow(cv2.cvtColor(labeled_img, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    plt.title("Image after Component Labeling")
    plt.show()

# Load the image
image_path = '/content/pattern.jpg'
original_image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Step 1: Noise Reduction
blurred_image = noise_reduction(original_image)

# Step 2: Histogram Analysis
plot_histogram(blurred_image)

# Step 3: Thresholding
thresholded_image = apply_thresholding(blurred_image)

# Step 4: Connectivity Analysis
connected_component_label(thresholded_image)

# Step 5: Pattern Recognition
font = cv2.FONT_HERSHEY_COMPLEX
contours, _ = cv2.findContours(thresholded_image, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

for cnt in contours:
    approx = cv2.approxPolyDP(cnt, 0.01 * cv2.arcLength(cnt, True), True)
    cv2.drawContours(original_image, [approx], 0, (0), 5)
    x = approx.ravel()[0]
    y = approx.ravel()[1]
    if len(approx) == 4:
        cv2.putText(original_image, "Square", (x, y), font, 1, (255))
    else:
        cv2.putText(original_image, "Circle", (x, y), font, 1, (255))

original_image_colored = cv2.cvtColor(original_image, cv2.COLOR_GRAY2BGR)
cv2.drawContours(original_image_colored, contours, -1, (255, 0, 0), 2)

# Display the pattern recognition result
plt.imshow(cv2.cvtColor(original_image_colored, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title("Pattern Recognition")
plt.show()